// <auto-generated />
using System;
using DisbotNext.Infrastructures.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DisbotNext.Infrastructures.Sqlite.Migrations
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20210424175115_TempChannel now created as a group and will be delete as a group.")]
    partial class TempChannelnowcreatedasagroupandwillbedeleteasagroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.ChatLog", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("ChatLogs");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<ulong?>("TriggeredById")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TriggeredById");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.Member", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoMoveToChannel")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Exp")
                        .HasColumnType("REAL");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.StockSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<ulong>("DiscordMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StockSubscriptions");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.TempChannel", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TempChannels");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.ChatLog", b =>
                {
                    b.HasOne("DisbotNext.Infrastructures.Common.Models.Member", "Author")
                        .WithMany("ChatLogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.ErrorLog", b =>
                {
                    b.HasOne("DisbotNext.Infrastructures.Common.Models.Member", "TriggeredBy")
                        .WithMany()
                        .HasForeignKey("TriggeredById");

                    b.Navigation("TriggeredBy");
                });

            modelBuilder.Entity("DisbotNext.Infrastructures.Common.Models.Member", b =>
                {
                    b.Navigation("ChatLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
